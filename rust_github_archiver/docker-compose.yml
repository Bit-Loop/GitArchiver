# GitHub Archive Scraper - Docker Compose Configuration
# Production-ready multi-service deployment

version: '3.8'

services:
  # ═══════════════════════════════════════════════════════════════════════════════
  # PostgreSQL Database
  # ═══════════════════════════════════════════════════════════════════════════════
  postgres:
    image: postgres:15-alpine
    container_name: github_archiver_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: github_archiver
      POSTGRES_USER: github_archiver
      POSTGRES_PASSWORD: github_archiver_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - github_archiver_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U github_archiver -d github_archiver"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ═══════════════════════════════════════════════════════════════════════════════
  # GitHub Archive Scraper Application
  # ═══════════════════════════════════════════════════════════════════════════════
  github_archiver:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-2.0.0}
    container_name: github_archiver_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: github_archiver
      DB_USER: github_archiver
      DB_PASSWORD: github_archiver_password
      DB_MIN_CONNECTIONS: 5
      DB_MAX_CONNECTIONS: 20
      
      # Web Server Configuration
      WEB_HOST: 0.0.0.0
      WEB_PORT: 8081
      
      # GitHub Configuration (Optional)
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      GITHUB_USERNAME: ${GITHUB_USERNAME:-}
      
      # Download Configuration
      DOWNLOAD_DIR: /app/gharchive_data
      MAX_CONCURRENT: ${MAX_CONCURRENT:-6}
      BATCH_SIZE: ${BATCH_SIZE:-500}
      REQUEST_TIMEOUT: 180
      MAX_RETRIES: 3
      
      # Resource Limits
      MEMORY_LIMIT_GB: ${MEMORY_LIMIT_GB:-8.0}
      DISK_LIMIT_GB: ${DISK_LIMIT_GB:-50.0}
      CPU_LIMIT_PERCENT: ${CPU_LIMIT_PERCENT:-80.0}
      
      # Security Configuration
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-key}
      
      # Logging Configuration
      RUST_LOG: ${RUST_LOG:-info}
      RUST_BACKTRACE: ${RUST_BACKTRACE:-1}
    volumes:
      - archive_data:/app/gharchive_data
      - archive_logs:/app/logs
      - ./config:/app/config:ro
    ports:
      - "${WEB_PORT:-8081}:8081"
    networks:
      - github_archiver_network
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-16G}
          cpus: ${CPU_LIMIT:-4.0}
        reservations:
          memory: 2G
          cpus: '1.0'

  # ═══════════════════════════════════════════════════════════════════════════════
  # Redis Cache (Optional - for future features)
  # ═══════════════════════════════════════════════════════════════════════════════
  redis:
    image: redis:7-alpine
    container_name: github_archiver_cache
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - github_archiver_network
    profiles:
      - full
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ═══════════════════════════════════════════════════════════════════════════════
  # Monitoring with Prometheus (Optional)
  # ═══════════════════════════════════════════════════════════════════════════════
  prometheus:
    image: prom/prometheus:latest
    container_name: github_archiver_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - github_archiver_network
    profiles:
      - monitoring
    depends_on:
      - github_archiver
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ═══════════════════════════════════════════════════════════════════════════════
  # Grafana Dashboard (Optional)
  # ═══════════════════════════════════════════════════════════════════════════════
  grafana:
    image: grafana/grafana:latest
    container_name: github_archiver_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - github_archiver_network
    profiles:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

# ═══════════════════════════════════════════════════════════════════════════════
# Networks
# ═══════════════════════════════════════════════════════════════════════════════
networks:
  github_archiver_network:
    driver: bridge
    name: github_archiver_network
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ═══════════════════════════════════════════════════════════════════════════════
# Volumes
# ═══════════════════════════════════════════════════════════════════════════════
volumes:
  postgres_data:
    driver: local
    name: github_archiver_postgres_data
  
  archive_data:
    driver: local
    name: github_archiver_data
  
  archive_logs:
    driver: local
    name: github_archiver_logs
  
  redis_data:
    driver: local
    name: github_archiver_redis_data
  
  prometheus_data:
    driver: local
    name: github_archiver_prometheus_data
  
  grafana_data:
    driver: local
    name: github_archiver_grafana_data
